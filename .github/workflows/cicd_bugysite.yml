# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Full CI/CD pipeline

on:
  push:
    branches:
      - master
  pull_request:
    types: opened
    branches: master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'

      - name: Prepare secret_key
        env:
          SECRET_KEY: '${{ secrets.APP_NAME_SECRET_KEY }}'
        run: |
          echo "SECRET_KEY=${{ secrets.APP_NAME_SECRET_KEY }}" > .env
          pwd
          cat .env


      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate
      
      - name: Install dependencies
        run: pip install -r requirements.txt
      
      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v3
        with:
          name: python-app
          path: |
            . 
            !venv/
            
  sast:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python version
        uses: actions/setup-python@v4
        with:
          python-version: '3.8'
        
      - name: Perform SAST Bandit scan.
        run: |
          pip install bandit
          python -m bandit -r . -ll
            
  sca:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Perform SCA Snyk scan.
        run: |
          docker run --rm --env SNYK_TOKEN=${{ secrets.SNYK_TOKEN }} --env COMMAND="pip install -r /buggy-site/requirements.txt" \
          -v $PWD:/buggy-site snyk/snyk:python-3.8 snyk test --file=/buggy-site/requirements.txt --json-file-output=/buggy-site/output.json

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [build, sca, sast]
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: python-app
          path: .
          
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'bugysite'
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_D83C7686534D4E4EA7963DB901E9A8F9 }}
          
  dast:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3

      - run: |
          sed 's/<pass>/'${{ secrets.BS_PASS }}'/g' $GITHUB_WORKSPACE/config/conf-template.yaml > $GITHUB_WORKSPACE/config/conf.yaml
          sed -i 's/<user>/'${{ secrets.BS_USER }}'/g' $GITHUB_WORKSPACE/config/conf.yaml
          sed -i 's!<url>!'${{ vars.URL }}'!g' $GITHUB_WORKSPACE/config/conf.yaml
          ls $GITHUB_WORKSPACE/config
          cat $GITHUB_WORKSPACE/config/conf.yaml
          
      - uses: actions/upload-artifact@v3
        with:
          name: config-file
          path: config/conf.yaml
          
      - name: ZAP Scan
        id: scan
        run: |
          docker run -v $GITHUB_WORKSPACE:/zap/wrk/:rw --user root owasp/zap2docker-stable zap.sh -cmd -autorun /zap/wrk/config/conf.yaml
          if cat output.json | jq '.site[].alerts[] | "\(.riskdesc) - \(.name)"' | grep '"High'; then exit 1; else exit 0; fi
          
      - uses: actions/upload-artifact@v3
        if: failure() && steps.scan.outcome != 'success'
        with:
          name: zap-results
          path: output.json
